
[menu __main __setup __leds]
type: list
name: LEDs

[menu __main __setup __leds __screen]
type: list
name: Screen

[menu __main __setup __leds __btn_upper]
type: list
name: Button Upper

[menu __main __setup __leds __btn_lower]
type: list
name: Button Lower


[menu __main __setup __leds __screen __RED]
type: input
name: RED: {'%0.1f' % menu.input}
input: {printer['neopixel leds']['color_data'][0][0]}
input_min: 0.0
input_max: 1.0
input_step: 0.1
realtime: True
gcode:
    {% set red = '%.1f' % menu.input %}
    {% set green = printer['neopixel leds']['color_data'][0][1] %}
    {% set blue = printer['neopixel leds']['color_data'][0][2]%}
    { action_respond_info("Result: %s: red:%s green:%s blue:%s menu.event:%s" % (printer['neopixel leds']['color_data'][0],red,green,blue,menu.event)) }
    SET_LED LED=leds RED={red} GREEN={green} BLUE={blue} INDEX=1 TRANSMIT=1


[menu __main __setup __leds __screen __GREEN]
type: input
name: GREEN: {'%0.1f' % menu.input}
input: {printer['neopixel leds']['color_data'][0][1]}
input_min: 0.0
input_max: 1.0
input_step: 0.1
realtime: True
gcode:
    {% set red = printer['neopixel leds']['color_data'][0][0]%}
    {% set green = '%.1f' % menu.input %}
    {% set blue = printer['neopixel leds']['color_data'][0][2]%}
    { action_respond_info("Result: %s: red:%s green:%s blue:%s menu.event:%s" % (printer['neopixel leds']['color_data'][0],red,green,blue,menu.event)) }
    SET_LED LED=leds RED={red} GREEN={green} BLUE={blue} INDEX=1 TRANSMIT=1

[menu __main __setup __leds __screen __BLUE]
type: input
name: BLUE: {'%0.1f' % menu.input}
input: {printer['neopixel leds']['color_data'][0][2]}
input_min: 0.0
input_max: 1.0
input_step: 0.1
realtime: True
gcode:
    {% set red = printer['neopixel leds']['color_data'][0][0]%}
    {% set green = printer['neopixel leds']['color_data'][0][1] %}
    {% set blue = '%.1f' % menu.input%}
    { action_respond_info("Result: %s: red:%s green:%s blue:%s menu.event:%s" % (printer['neopixel leds']['color_data'][0],red,green,blue,menu.event)) }
    SET_LED LED=leds RED={red} GREEN={green} BLUE={blue} INDEX=1 TRANSMIT=1

[menu __main __setup __leds __btn_upper __RED]
type: input
name: RED: {'%0.1f' % menu.input}
input: {printer['neopixel leds']['color_data'][1][0]}
input_min: 0.0
input_max: 1.0
input_step: 0.1
realtime: True
gcode:
    {% set red = '%.1f' % menu.input %}
    {% set green = printer['neopixel leds']['color_data'][1][1] %}
    {% set blue = printer['neopixel leds']['color_data'][1][2]%}
    { action_respond_info("Result: %s: red:%s green:%s blue:%s menu.event:%s" % (printer['neopixel leds']['color_data'][0],red,green,blue,menu.event)) }
    SET_LED LED=leds RED={red} GREEN={green} BLUE={blue} INDEX=2 TRANSMIT=1


[menu __main __setup __leds __btn_upper __GREEN]
type: input
name: GREEN: {'%0.1f' % menu.input}
input: {printer['neopixel leds']['color_data'][1][1]}
input_min: 0.0
input_max: 1.0
input_step: 0.1
realtime: True
gcode:
    {% set red = printer['neopixel leds']['color_data'][1][0]%}
    {% set green = '%.1f' % menu.input %}
    {% set blue = printer['neopixel leds']['color_data'][1][2]%}
    { action_respond_info("Result: %s: red:%s green:%s blue:%s menu.event:%s" % (printer['neopixel leds']['color_data'][0],red,green,blue,menu.event)) }
    SET_LED LED=leds RED={red} GREEN={green} BLUE={blue} INDEX=2 TRANSMIT=1

[menu __main __setup __leds __btn_upper __BLUE]
type: input
name: BLUE: {'%0.1f' % menu.input}
input: {printer['neopixel leds']['color_data'][1][2]}
input_min: 0.0
input_max: 1.0
input_step: 0.1
realtime: True
gcode:
    {% set red = printer['neopixel leds']['color_data'][1][0]%}
    {% set green = printer['neopixel leds']['color_data'][1][1] %}
    {% set blue = '%.1f' % menu.input%}
    { action_respond_info("Result: %s: red:%s green:%s blue:%s menu.event:%s" % (printer['neopixel leds']['color_data'][0],red,green,blue,menu.event)) }
    SET_LED LED=leds RED={red} GREEN={green} BLUE={blue} INDEX=2 TRANSMIT=1

[menu __main __setup __leds __btn_lower __RED]
type: input
name: RED: {'%0.1f' % menu.input}
input: {printer['neopixel leds']['color_data'][2][0]}
input_min: 0.0
input_max: 1.0
input_step: 0.1
realtime: True
gcode:
    {% set red = '%.1f' % menu.input %}
    {% set green = printer['neopixel leds']['color_data'][2][1] %}
    {% set blue = printer['neopixel leds']['color_data'][2][2]%}
    { action_respond_info("Result: %s: red:%s green:%s blue:%s menu.event:%s" % (printer['neopixel leds']['color_data'][0],red,green,blue,menu.event)) }
    SET_LED LED=leds RED={red} GREEN={green} BLUE={blue} INDEX=3 TRANSMIT=1


[menu __main __setup __leds __btn_lower __GREEN]
type: input
name: GREEN: {'%0.1f' % menu.input}
input: {printer['neopixel leds']['color_data'][2][1]}
input_min: 0.0
input_max: 1.0
input_step: 0.1
realtime: True
gcode:
    {% set red = printer['neopixel leds']['color_data'][2][0]%}
    {% set green = '%.1f' % menu.input %}
    {% set blue = printer['neopixel leds']['color_data'][2][2]%}
    { action_respond_info("Result: %s: red:%s green:%s blue:%s menu.event:%s" % (printer['neopixel leds']['color_data'][0],red,green,blue,menu.event)) }
    SET_LED LED=leds RED={red} GREEN={green} BLUE={blue} INDEX=3 TRANSMIT=1

[menu __main __setup __leds __btn_lower __BLUE]
type: input
name: BLUE: {'%0.1f' % menu.input}
input: {printer['neopixel leds']['color_data'][2][2]}
input_min: 0.0
input_max: 1.0
input_step: 0.1
realtime: True
gcode:
    {% set red = printer['neopixel leds']['color_data'][2][0]%}
    {% set green = printer['neopixel leds']['color_data'][2][1] %}
    {% set blue = '%.1f' % menu.input%}
    { action_respond_info("Result: %s: red:%s green:%s blue:%s menu.event:%s" % (printer['neopixel leds']['color_data'][0],red,green,blue,menu.event)) }
    SET_LED LED=leds RED={red} GREEN={green} BLUE={blue} INDEX=3 TRANSMIT=1



[menu __main __setup __calib]
type: list
enable: {not printer.idle_timeout.state == "Printing" }
index: 0
name: Calibration

[menu __main __setup __calib __set_z_offset]
type: list
name: Set Z offset

[menu __main __setup __calib __set_z_offset __probe]
type: command
enable: {not printer.idle_timeout.state == "Printing" }
name: Start probing
gcode:
    G29

[menu __main __setup __calib __set_z_offset __set_z]
type: input
name: Set Z: {['-1.00','-0.50','-0.25','-0.10','-0.05','-0.01','0.00','+0.01','+0.05','+0.10','+0.25','+0.50','+1.00'][menu.input|int]}
input: 6
input_min: 0
input_max: 12
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['-1.0','-0.5','-0.25','-0.10','-0.05','-0.01','0','+0.01','+0.05','+0.10','+0.25','+0.5','+1.0'][menu.input|int]}
    {%- endif -%}

[menu __main __setup __calib __set_z_offset __save]
type: command
enable: {not printer.idle_timeout.state == "Printing" }
name: Save
gcode:
    ACCEPT
    SAVE_CONFIG

[menu __main __setup __calib __bed_mesh_calibrate]
name: Bed Mesh
type: list

[menu __main __setup __calib __bed_mesh_calibrate __start]
type: command
enable: {not printer.idle_timeout.state == "Printing"} 
name: Start
gcode:
    G30

[menu __main __setup __calib __bed_mesh_calibrate __status]
type: command
name: Status: {printer.idle_timeout.state}


[menu __main __setup __tuning __status]
type: command
name: Status: {printer.idle_timeout.state}

[menu __main __setup __calib __input_shaper]
type: list
enable: {not printer.idle_timeout.state == "Printing"} 
name: Input Shaper

[menu __main __setup __calib __input_shaper __start]
type: command
enable: {not printer.idle_timeout.state == "Printing"} 
name: Start
gcode:
    G40

# Disable Bed probe main menu item
[menu __main __setup __calib __bedprobe]
type: disabled
name: Bed probe

# Disable OctoPrint main menu item
[menu __main __octoprint]
type: disabled
name: OctoPrint

# Disable SD Card main menu item
[menu __main __sdcard]
type: disabled
name: SD Card

